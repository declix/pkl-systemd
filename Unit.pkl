abstract module declix.systemd.Unit;

// https://www.freedesktop.org/software/systemd/man/latest/systemd.unit.html
class UnitSection {
    after: String?
    allowIsolate: String?
    before: String?
    bindsTo: String?
    collectMode: String?
    conflicts: String?
    defaultDependencies: String?
    description: String?
    documentation: String?
    failureAction: String?
    failureActionExitStatus: String?
    ignoreOnIsolate: String?
    jobRunningTimeoutSec: String?
    jobTimeoutAction: String?
    jobTimeoutRebootArgument: String?
    jobTimeoutSec: String?
    joinsNamespaceOf: String?
    onFailure: String?
    onFailureJobMode: String?
    onSuccess: String?
    onSuccessJobMode: String?
    partOf: String?
    propagatesReloadTo: String?
    propagatesStopTo: String?
    rebootArgument: String?
    refuseManualStart: String?
    refuseManualStop: String?
    reloadPropagatedFrom: String?
    requires: String?
    requiresMountsFor: String?
    requisite: String?
    sourcePath: String?
    startLimitAction: String?
    startLimitBurst: String?
    startLimitIntervalSec: String?
    stopPropagatedFrom: String?
    stopWhenUnneeded: String?
    successAction: String?
    successActionExitStatus: String?
    surviveFinalKillSignal: String?
    upholds: String?
    wants: String?
    wantsMountsFor: String?
}

// https://www.freedesktop.org/software/systemd/man/latest/systemd.unit.html
class InstallSection {
    alias: String?
    also: String?
    defaultInstance: String?
    requiredBy: String?
    upheldBy: String?
    wantedBy: String?
}

local class UnitFileRenderer extends ValueRenderer {
    function renderDocument(value: Any): String = renderSections(value.toMap())

    function renderSections(map: Map): String = new Listing {
        for (name in map.keys) {
            renderSection(name, map[name])
        }
    }.join("\n")

    function renderSection(name: String, section: Any): String = 
        "[\(name.capitalize())]\n" + new Listing {
            for (name in section.toMap().keys) {
                when (section.toMap()[name] != null) {
                    renderProperty(name, section.toMap()[name])
                }
            }
            ""
    }.join("\n")

    function renderProperty(name: String, value: Any): String = 
        if (value is Mapping) new Listing {
            for (key in value.toMap().keys) {
                "\(name.capitalize())=\(key)=" + renderValue(value.toMap()[key])
            }
        }.join("\n")
        else "\(name.capitalize())=" + renderValue(value)

    function renderValue(value: Any): String =
        if (value is String) value
        else if (value is Number) "\(value)"
        else throw("unexpected value \(value.getClass())")
}

output {
    renderer = new UnitFileRenderer { }
}